{
  "metadata": {
    "name": "Simple Simulation",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h1>Simple JavaScript Simulation</h1>\n<style>\n\t      /* CSS styles for simulation canvas */\n\t      canvas {\n\t        border: 1px solid black;\n\t      }\n\t    </style>\n<p> Run the next cell to define the simulation and the click on the \"Start Simulation\" button </p>",
      "status": "",
      "output": "<h1>Simple JavaScript Simulation</h1>\n<style>\n\t      /* CSS styles for simulation canvas */\n\t      canvas {\n\t        border: 1px solid black;\n\t      }\n\t    </style>\n<p> Run the next cell to define the simulation and the click on the \"Start Simulation\" button </p>",
      "type": "html"
    },
    {
      "code": "// JavaScript code for simulation\nsimulate=function(){\t\n\t      // Get canvas element\n\t      const canvas = document.getElementById('simulationCanvas');\n\t      const ctx = canvas.getContext('2d');\n\t\n\t      // Set initial position and velocity\n\t      let x = canvas.width / 2;\n\t      let y = canvas.height - 30;\n\t      let dx = 2;\n\t      let dy = -2;\n\t\n\t      // Set ball radius\n\t      const ballRadius = 10;\n\t\n\t      // Function to draw the ball\n\t      function drawBall() {\n\t        ctx.beginPath();\n\t        ctx.arc(x, y, ballRadius, 0, Math.PI * 2);\n\t        ctx.fillStyle = 'blue';\n\t        ctx.fill();\n\t        ctx.closePath();\n\t      }\n\t\n\t      // Function to update ball position\n\t      function updateBallPosition() {\n\t        // Clear canvas\n\t        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\n\t        // Draw ball\n\t        drawBall();\n\t\n\t        // Update position\n\t        x += dx;\n\t        y += dy;\n\t\n\t        // Reverse direction if ball hits canvas edges\n\t        if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {\n\t          dx = -dx;\n\t        }\n\t        if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) {\n\t          dy = -dy;\n\t        }\n\t      }\n\t\n\t      // Call updateBallPosition function repeatedly for animation\n\t      setInterval(updateBallPosition, 10);\n}",
      "status": "[2]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "function(){\t\n\t      // Get canvas element\n\t      const canvas = document.getElementById('simulationCanvas');\n\t      const ctx = canvas.getContext('2d');\n\t\n\t      // Set initial position and velocity\n\t      let x = canvas.width / 2;\n\t      let y = canvas.height - 30;\n\t      let dx = 2;\n\t      let dy = -2;\n\t\n\t      // Set ball radius\n\t      const ballRadius = 10;\n\t\n\t      // Function to draw the ball\n\t      function drawBall() {\n\t        ctx.beginPath();\n\t        ctx.arc(x, y, ballRadius, 0, Math.PI * 2);\n\t        ctx.fillStyle = 'blue';\n\t        ctx.fill();\n\t        ctx.closePath();\n\t      }\n\t\n\t      // Function to update ball position\n\t      function updateBallPosition() {\n\t        // Clear canvas\n\t        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\n\t        // Draw ball\n\t        drawBall();\n\t\n\t        // Update position\n\t        x += dx;\n\t        y += dy;\n\t\n\t        // Reverse direction if ball hits canvas edges\n\t        if (x + dx &gt; canvas.width - ballRadius || x + dx &lt; ballRadius) {\n\t          dx = -dx;\n\t        }\n\t        if (y + dy &gt; canvas.height - ballRadius || y + dy &lt; ballRadius) {\n\t          dy = -dy;\n\t        }\n\t      }\n\t\n\t      // Call updateBallPosition function repeatedly for animation\n\t      setInterval(updateBallPosition, 10);\n} <br>",
      "type": "code"
    },
    {
      "code": "<canvas id=\"simulationCanvas\" width=\"400\" height=\"400\"></canvas>\n<button onclick=\"simulate()\">Start Simulation</button>",
      "status": "",
      "output": "<canvas id=\"simulationCanvas\" width=\"400\" height=\"400\"></canvas>\n<button onclick=\"simulate()\">Start Simulation</button>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb"
}