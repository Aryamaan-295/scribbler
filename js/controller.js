file_details={};
username='';

/****** Loading JSNB *********/

load_jsnb=function(content){
      
      if(typeof(content)=='string') var nb=JSON.parse(content);      
      else var nb=content;
	
      const message = {
        action:"sandbox.loadJSNB",
        data:nb,
        call_bk:""
      };
      
      sandbox_iframe.contentWindow.postMessage(message, '*');
      
      

      var run_on_load = nb.run_on_load || false;
      get_dom("nb_name").innerHTML=nb.metadata.name;
      document.title = nb.metadata.name+":  Scribbler JavaScript Notebook";
      var metaDescription = document.querySelector('meta[name="description"]');

	// Set the description dynamically
	var newDescription = nb.metadata.name+" - Notebook for experimenting in JavaScript. Contains editable code and output. Play with html and code using a simple interface - Scribbler.";
	metaDescription.setAttribute("content", newDescription);
      get_dom("run_on_load").checked=run_on_load;
     
	

}

load_file_click=async function() {
	
	const content = await load_file();
	
	get_dom("sandbox").setAttribute("sandbox","allow-scripts allow-downloads allow-top-navigation allow-popups");
        get_dom("sandbox").setAttribute("src","sandbox.html?var=xxx");
      	get_dom("break-sandbox").style.display='inline';
      	sandbox_iframe=await wait_for_dom("sandbox");
      	sandbox_iframe.addEventListener("load", function() {
	  load_jsnb(content);
	},{once:true});

}
load_from_url=function(){
	var url='';
	try{ 
		const urlParams = new URLSearchParams(window.location.search);
	const jsnb_path = urlParams.get('jsnb');
	if(jsnb_path !=null && typeof jsnb_path!=='undefined') url=jsnb_path;
		else url=window.location.href.split("#")[1];
	} catch(e){url="./examples/Hello-world.jsnb"}
	if(url==undefined) url="./examples/Hello-world.jsnb";
  	if( url.length>1){
  		if(url.split(":")[0].trim()=='github') initialize_from_git(url.split(":")[1].trim());
  		else if(url.split(":")[0].trim()=='local') loadLocalFile(url.split(":")[1].trim());
  		else read_file(url,load_jsnb,err=>{alert(err.message)});
  	}else{

  		
  		get_dom("nb_name").innerHTML="New JSNB";
  		insert_cell("code");
  	}
}

/***** Downloading ************/
// Sets up a new MessageChannel
// so we can return a Promise with the nb
function get_nb() {
  return new Promise((resolve) => {
    const channel = new MessageChannel();
    // this will fire when iframe will answer

    channel.port1.onmessage = e => {
    	var nb=e.data;
    	nb['run_on_load'] = get_dom("run_on_load").checked;
	nb.metadata.name=get_dom("nb_name").innerHTML;
    	return resolve(nb);
    }
    // let iframe know we're expecting an answer
    // send it its own port
    sandbox_iframe.contentWindow.postMessage({"action":'sandbox.getNB'}, '*', [channel.port2]);  
  });
}


// Sets up a new MessageChannel
// so we can return a Promise with the html
function get_html(view) {
  return new Promise((resolve) => {
    const channel = new MessageChannel();
    // this will fire when iframe will answer

    channel.port1.onmessage = e => {
    	var doc=e.data;
    	return resolve(doc);
    }
    // let iframe know we're expecting an answer
    // send it its own port
    sandbox_iframe.contentWindow.postMessage({"action":'sandbox.getHTML',"view":view}, '*', [channel.port2]);  
  });
}
download_js=async function(){
 	var nb =await get_nb();
	var js=nb.cells.filter(x=>x.type=='code').map(x=>x['code']);
 	js=js.join("\n/*---------*/\n");
 	js="/*Generated by JSNB: https://github.com/gopi-suvanam/jsnb*/\n\n"+js;
 	let file_name=get_dom("nb_name").innerHTML.replaceAll(' ','_')+'.js';
 	download_string(js,file_name,"data:text/js;charset=utf-8");
 	
}

download_html=async function(view){
	// Send a message object to the iframe
	var doc=await get_html(view);
	doc=doc.replace("______title",get_dom("nb_name").innerHTML);
	let file_name=get_dom("nb_name").innerHTML.replaceAll(' ','_')+'.html';
	download_string(doc,file_name,"data:text/html;charset=utf-8");
   
}
download_nb=async function(){
	// Send a message object to the iframe
	var nb=await get_nb();
	let url='';
	let file_name='';
	try{ 
	
		const urlParams = new URLSearchParams(window.location.search);
		const jsnb_path = urlParams.get('jsnb');
		if(jsnb_path !=null && typeof jsnb_path!=='undefined') url=jsnb_path;
			else url=window.location.href.split("#")[1];
	} catch(e){
		console.log(e);
		url=''
	}
		
	if(url!=undefined && url.length>1){
		 file_name = url.split('/').slice(-1)[0]
	}else{
		
		 file_name=nb.metadata.name.replaceAll(' ','_')+'.jsnb'
	}
	download_string(JSON.stringify(nb,undefined,2),file_name,"data:text/json;charset=utf-8");	
	
   
}

/****** Other Functionality ************/
run_all=function(){

    // Send a message object to the iframe
   
      const message = {
        action:"sandbox.runAll",
        data:""      
       };
      sandbox_iframe.contentWindow.postMessage(message, '*');

}

insert_cell=function(type){
	 // Send a message object to the iframe
   
      const message = {
        action:"sandbox.insertCell",
        data:{type:type},
        call_bk:""
      };
      sandbox_iframe.contentWindow.postMessage(message, '*');
}
break_sandbox=async function(){
      const confirmation = confirm("!!! Alert !!! You are about to break the Sandbox. This can give the notebook access to your cookies, cache etc. Do so only if you trust the code in the notebook !!!");
      if(!confirmation) return;
      let nb=await get_nb();
      get_dom("sandbox").removeAttribute("sandbox");
      get_dom("sandbox").setAttribute("src","sandbox.html");
      
      sandbox_iframe=await wait_for_dom("sandbox")
      sandbox_iframe.addEventListener("load",async function(){
      		console.log("Sanbox loaded");
      		load_jsnb(nb);
      	}
      	,{once:true}
      );
      get_dom("break-sandbox").style.display='none';
}



/******** Functions for handling local (IndexedDB) files */
openFileNamesModal=function(){
  // Get the modal
  const modal = document.getElementById('fileNamesModal');

  

  // Call function to retrieve file names and populate the modal
  getAllFileNames()
    .then(files => {
      const fileNamesList = document.getElementById('fileNamesList');

      // Clear existing list items
      fileNamesList.innerHTML = '';

      // Populate the modal with file names
      files.forEach(file => {
        const li = document.createElement('li');
        const fileLink=document.createElement('a');
        fileLink.textContent=file.name;//+" "+file.update_time;
	fileLink.onclick=()=>{
		loadLocalFile(file.id);
		closeModal(get_dom('fileNamesModal'));
	}
	
        const deleteBtn=document.createElement('a');
        deleteBtn.classList.add("file-delete");
        deleteBtn.onclick=()=>deleteLocalFile(file.id,file.name);
        deleteBtn.innerHTML='&#9747;';
        
        li.appendChild(fileLink);
        li.appendChild(deleteBtn);
        fileNamesList.appendChild(li);
      });
      

    })
    .catch(error => {
      alert('Error retrieving file names:'+error);
    });
}

saveLocalFile=async function(){
	getDom("save-button").setAttribute("aria-busy","true");
	try{
		let nb =await get_nb();
		let update_time=new Date();
		let id=await insertOrUpdateFile(nb, nb.metadata.name,update_time,file_details['id']);
		openFileNamesModal();
		file_details['id']=id;
	}catch(e){
		alert("Error saving file locally");
	}
	setTimeout( ()=>
	getDom("save-button").removeAttribute("aria-busy"),
	500);
}
deleteLocalFile=function(id,name){
	let c=confirm("Deleting : "+name);
	if(c)
	deleteFileById(parseInt(id)).then(x=>openFileNamesModal()).catch(err=>{alert("Error in deletion:"+error)});

}
loadLocalFile=function(id){
	getFileById(id).then(obj=>{
		
		load_jsnb(obj.nb);
		file_details['id']=obj.id
		
	}
	
	).catch(err=>{alert("Error in Loading file:"+err)});

}

/********* Initialize Certain Global Variables and Load the JSNB from URL *****/
keyUp=function(e) {
	  if (e.ctrlKey && e.key === 's') {
	    saveLocalFile();
	  } else if (e.ctrlKey && e.key === 'g') {
	    openModal(get_dom('git-import-export'));
	  } else if (e.ctrlKey && e.key === 'o') {
	    openModal(get_dom('fileNamesModal'));
	    openFileNamesModal()
			
	  }
	  else if (e.altKey && e.key === 'Â®') {
	    run_all()
			
	  }
	  else if (e.altKey && e.key === 'r') {
	    run_all()
			
	  }
	}
insitialize_page=async function(){

	window.onload = async function() {
		first_load=true;
		get_dom("sandbox").setAttribute("sandbox","allow-scripts allow-downloads allow-top-navigation allow-popups");
		get_dom("sandbox").setAttribute("src","sandbox.html");
		get_dom("break-sandbox").style.display='inline';
	      	
	      	
		sandbox_iframe = await wait_for_dom('sandbox');
		
		sandbox_iframe.addEventListener("load", function() {
			if(first_load){
				console.log("Loading from URL");
				load_from_url();
			}else{
				console.log("Ignoring");
			}
			first_load=false;
		},{once:true});
		
		
	  	document.onkeyup = keyUp;
		
		sandbox_iframe.onkeyup=keyUp;
		initialize_git();
	};
	
	  	
}

